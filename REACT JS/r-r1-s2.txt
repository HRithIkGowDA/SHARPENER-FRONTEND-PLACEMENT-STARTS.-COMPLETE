React JS Round 1 - SET 2 - Solutions


Props in React are used to pass data from a parent component to a child component. Props are read-only and cannot be modified by the child component. The difference between state and props is that state is used to store and manage data that is specific to a particular component, whereas props are used to pass data from a parent component to a child component.
Prop drilling refers to the process of passing props through multiple components in a component tree, even though some of those components do not need the props. To prevent prop drilling, you can use techniques such as Context API, Higher Order Components (HOCs), and Render Props.
Error boundaries are a way to handle errors in React components. An error boundary is a component that can catch JavaScript errors anywhere in its child component tree, log those errors, and display a fallback UI. An error boundary is different from other components in that it has a lifecycle method called componentDidCatch which is used to catch errors in the child components.
React Hooks are functions that allow you to use state and other React features in functional components. Hooks are different from normal functions in that they allow you to use state and other React features without having to use a class.
The 2 rules that must be followed while using React Hooks are that hooks must be called at the top level of your component, and that hooks cannot be called inside loops or conditions. The reason behind these rules is to ensure that the state and behavior of your component is predictable and consistent.
Functional components in React re-render when their props or the state they have access to via hooks changes. When props or state changes, React will run the component again, and then it will check if the new virtual DOM is different from the previous one. If it is, React will update the actual DOM to match the new virtual DOM. Unlike class components, functional components do not have lifecycle methods and do not have instances, therefore, functional components do not have lifecycle methods such as componentDidMount, componentDidUpdate, and componentWillUnmount. However, functional components can use Hooks like useEffect, useState and useContext which give them the ability to perform side-effects, manage state, and access context.
The return statement of a functional component is called every time the component is rendered or re-rendered. This occurs when the component's props or state change, or when an event or action causes the component to update.
The useEffect React Hook is used to perform side-effects in functional components. It allows you to synchronize a component with an external system, and can be used for tasks such as fetching data, updating the DOM, or setting up and cleaning up subscriptions. The useEffect Hook is called after the first render, and on every re-render, after the render is completed. It allows you to run code after the component has rendered, and to synchronize the component with an external system. It accepts two arguments, the first one is the effect function and the second one is the dependencies array. The effect function runs after the render and the dependencies array is used to determine if the effect should run or not. If the dependencies change, the effect function is called again.
The useEffect React Hook takes two arguments: a callback function and a dependencies array. The callback function, also known as the effect function, is the first argument of useEffect. It is executed after the component has rendered, and it is where you put the code to perform the side-effect                                                                           The dependencies array, the second argument of useEffect, is used to determine when the effect function should be executed. If the values in the dependencies array change, React will re-run the effect function


useEffect(() => {                                           //callback

 async function fetchData() {

  const response = await fetch("https://api.example.com/data");

  const data = await response.json();

  setData(data);

 }

 fetchData();

}, []);





useEffect(() => {                                                          //dependency array

  // your code

}, [id]);





 the first argument of useEffect is the effect function, which performs the side-effects and the second argument is the dependencies array, which is used to determine when the effect function should be executed.



